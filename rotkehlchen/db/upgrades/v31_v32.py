from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from sqlite3 import Cursor

    from rotkehlchen.db.dbhandler import DBHandler


def _upgrade_history_events(cursor: 'Cursor') -> None:
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS history_events_copy (
        identifier INTEGER NOT NULL PRIMARY KEY,
        event_identifier TEXT NOT NULL,
        sequence_index INTEGER NOT NULL,
        timestamp INTEGER NOT NULL,
        location TEXT NOT NULL,
        location_label TEXT,
        asset TEXT NOT NULL,
        amount TEXT NOT NULL,
        usd_value TEXT NOT NULL,
        notes TEXT,
        type TEXT NOT NULL,
        subtype TEXT,
        counterparty TEXT,
        UNIQUE(event_identifier, sequence_index)
    );""")
    cursor.execute("""
    INSERT INTO history_events_copy (event_identifier, sequence_index, timestamp, location,
    location_label, asset, amount, usd_value, notes, type, subtype)
    SELECT event_identifier, sequence_index, timestamp, location, location_label, asset,
    amount, usd_value, notes, type, subtype
    FROM history_events;
    """)
    cursor.execute('DROP TABLE history_events;')
    cursor.execute('ALTER TABLE history_events_copy RENAME TO history_events;')
    cursor.execute(
        'UPDATE history_events SET subtype="reward" WHERE type="staking" AND subtype IS NULL;',
    )


def _remove_gitcoin(cursor: 'Cursor') -> None:
    cursor.execute('DELETE from ledger_actions WHERE identifier IN (SELECT parent_id FROM ledger_actions_gitcoin_data)')  # noqa: E501
    cursor.execute('DELETE from used_query_ranges WHERE name LIKE "gitcoingrants_%"')
    cursor.execute('DROP TABLE IF exists gitcoin_grant_metadata')
    cursor.execute('DROP TABLE IF exists ledger_actions_gitcoin_data')
    cursor.execute('DROP TABLE IF exists gitcoin_tx_type')


def _add_new_tables(cursor: 'Cursor') -> None:
    cursor.execute('INSERT OR IGNORE INTO location(location, seq) VALUES ("d", 36)')
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS ethereum_internal_transactions (
    parent_tx_hash BLOB NOT NULL,
    trace_id INTEGER NOT NULL,
    timestamp INTEGER NOT NULL,
    block_number INTEGER NOT NULL,
    from_address TEXT NOT NULL,
    to_address TEXT,
    value TEXT NOT NULL,
    FOREIGN KEY(parent_tx_hash) REFERENCES ethereum_transactions(tx_hash) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(parent_tx_hash, trace_id)
);""")  # noqa: E501
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS ethtx_address_mappings (
    address TEXT NOT NULL,
    tx_hash BLOB NOT NULL,
    blockchain TEXT NOT NULL,
    FOREIGN KEY(blockchain, address) REFERENCES blockchain_accounts(blockchain, account) ON DELETE CASCADE,
    FOREIGN KEY(tx_hash) references ethereum_transactions(tx_hash) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (address, tx_hash, blockchain)
);""")  # noqa: E501
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS evm_tx_mappings (
    tx_hash BLOB NOT NULL,
    blockchain TEXT NOT NULL,
    value TEXT NOT NULL,
    FOREIGN KEY(tx_hash) references ethereum_transactions(tx_hash) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (tx_hash, value)
);""")  # noqa: E501
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS history_events_mappings (
    parent_identifier INTEGER NOT NULL,
    value TEXT NOT NULL,
    FOREIGN KEY(parent_identifier) references history_events(identifier) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (parent_identifier, value)
);""")  # noqa: E501


def _refactor_manual_balance_id(cursor: 'Cursor') -> None:
    cursor.execute("""
    CREATE TABLE manually_tracked_balances_copy (
        id INTEGER PRIMARY KEY,
        asset TEXT NOT NULL,
        label TEXT NOT NULL,
        amount TEXT,
        location CHAR(1) NOT NULL DEFAULT('A') REFERENCES location(location),
        category CHAR(1) NOT NULL DEFAULT('A') REFERENCES balance_category(category),
        FOREIGN KEY(asset) REFERENCES assets(identifier) ON UPDATE CASCADE
    );""")
    cursor.execute("""
    INSERT INTO manually_tracked_balances_copy(asset, label, amount, location, category)
    SELECT asset, label, amount, location, category
    FROM manually_tracked_balances;
    """)
    cursor.execute('DROP TABLE manually_tracked_balances;')
    cursor.execute(
        'ALTER TABLE manually_tracked_balances_copy RENAME TO '
        'manually_tracked_balances;',
    )


def upgrade_v31_to_v32(db: 'DBHandler') -> None:
    """Upgrades the DB from v31 to v32
    - use new identifiers for the history_events table. The id will be generated by sqlite
    and will be the column rowid

    -Add the subtype REWARD to staking rewards (before they had type staking
    and no subtype)

    -Remove all gitcoin grant related data that was pulled from their API and saved in
    specific tables along with the tables themselves
    """
    cursor = db.conn.cursor()
    _upgrade_history_events(cursor)
    _remove_gitcoin(cursor)
    _add_new_tables(cursor)
    _refactor_manual_balance_id(cursor)
    db.conn.commit()
